name: Python CI

on:
  push:
    branches:
      - main
    paths:
      - 'setup.py'  # Only trigger the workflow if setup.py is changed
  pull_request:
    branches:
      - main
    paths:
      - 'setup.py'  # Only trigger the workflow if setup.py is changed
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  test_and_publish:
    runs-on: ubuntu-latest  # Runs the job on the latest Ubuntu runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Checkout the code

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'  # Specify the Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r workflow.txt  # Install the dependencies from workflow.txt

    - name: Verify test discovery
      run: |
        python -m pytest --collect-only test.py  # List tests in test.py without running them

    - name: Run tests
      run: |
        mkdir -p pytest-output  # Ensure the output directory exists
        python -m pytest test.py --maxfail=1 --disable-warnings -q --junitxml=pytest-output/results.xml  # Run tests from test.py

    - name: Upload test results
      if: always()  # This will always run, regardless of test pass/fail
      uses: actions/upload-artifact@v3  # Updated to v3
      with:
        name: test-results
        path: pytest-output/results.xml  # Upload the XML file generated by pytest

    - name: Upload detailed test logs
      if: always()  # Upload logs always, regardless of outcome
      run: |
        mkdir -p logs
        cp pytest-output/* logs/  # Copy the test output logs to the logs directory
        tar -czf logs.tar.gz logs  # Create a tarball of the logs directory
        echo "Uploading logs"
      continue-on-error: true  # Ensure this step runs even if previous steps fail

    - name: Check if tests passed
      id: test_status
      run: |
        if [[ $(pytest test.py --maxfail=1 --disable-warnings -q) == *"failures"* ]]; then
          echo "Tests failed, skipping publish.";
          exit 1;
        else
          echo "Tests passed, proceeding with PyPI publish.";
        fi

    - name: Publish to PyPI
      if: steps.test_status.outcome == 'success'  # Only run this step if tests passed
      run: |
        python -m pip install --upgrade setuptools wheel twine  # Install the necessary tools for PyPI publish
        python setup.py sdist bdist_wheel  # Build the package
        twine upload dist/*  # Upload the package to PyPI
      env:
        TWINE_USERNAME: Tanujairam  # GitHub secret for your PyPI username
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}  # GitHub secret for your PyPI password
